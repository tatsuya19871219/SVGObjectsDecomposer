@startuml SVGObjectsDecomposer

class MainWindow
{
    + AppState : AppStateViewModel
    + DecomposeEditor : DecomposeEditorViewModel
    + MainWindow()
    - EvokeSVGDecomposerTask(file : StorageFile) : void
    - OpenSVGFile(file : StorageFile) : SvgDocument
}


class AppStateViewModel
{
    + IsInitialized : bool <<observable property>>
    + IsSVGLoaded : bool <<observable property>>
    + IsEditable : bool <<observable property>>
    + CanUseInkscape : bool <<observable property>>
    + AppStateViewModel()
    + SVGLoaded() : void
    + Initialized() : void
    + Editable() : void
    + InkscapeAvailable() : void
}

class DecomposeEditorViewModel
{
    + CurrentDocument : SvgDocument <<observable property>>
    + EditingSVGContainer : EditableSVGContainer <<observable property>>
    + SelectedSVGObject : EditableSVGObject <<observable property>>
    + LayeredObjects : object <<observable property>>
    + OutputPurposeType : OutputPurpose <<observable property>>
    + OutputBaseDirname : string <<observable property>>
    + SetOutputPurposeCommand : ICommand
    - outputWriterFactory : OutputWriterFactory
    + DecomposeEditorViewModel()
    + SetNewDocument(document : SvgDocument) : void
    - SetOutputPurpose(purpose : OutputPurpose) : void
    + ReleaseDocument() : void
    + Save() : void
}

' Models
class EditableSVGContainer
{
    - svgContainer : SVGContainer <<read only>>
    - editableSVGObjects : List<EditableSVGObject> <<read only>>
    + EditableSVGContainer(svgContainer : SVGContainer)
    + Resize(width : double, height : double) : void
    '+ TrimAll() : void
    + SaveAll() : void
    + GenerateXAMLSample() : void
}

class EditableSVGLayer
{
    - Name : string <<observable property>>
}



class EditableSVGObject
{
    - original : SVGObject
    '- trimmed : SVGObject
    + EditableSVGObject(svgObject : SVGObject)
    + IsTrimmed : bool
    + Trim() : void
}



class SVGContainer
{
    + LayerCounts : int <<read only>>
    + LayerNames : List<string> <<read only>>
    + SVGObjects : List<SVGObject> <<read only>>
    - document : SvgDocument <<read only>>
    - templeteDocument : SVGDocumentTemplete <<read only>>
    - firstLayers : List<SvgGroup> <<read only>>
    ~ SVGContainer(document : SvgDocument)

}


class SVGLayer
{
    - name : string <<read only>>
}

class SVGObject
{
    - objectDocument : SvgDocument
}

' factories for SVG document creation
class SVGDocumentTemplete
{
    - templete : SvgDocument
    - SVGDocumentTemplete(document : SvgDocument)
    {static} ~ Extract(document : SvgDocument, layers : out List<SvgGroup>) : SVGDocumentTemplete
    - ExtractLayers(layers : out List<SvgGroup>) : void
    ~ CreateNewDocument() : SvgDocument
}

class SVGLayerTemplete
{
    - templete : SvgGroup
    - SVGLayerTemplete(group : SvgGroup)
    {static} ~ Extract(group : SvgGroup, elements : out List<SvgElement>) : SVGLayerTemplete
    - ExtractElements(elements : out List<SvgElement>) : void
    ~ CreateNewLayer() : SvgGroup
}



' arrows
MainWindow -right-> AppStateViewModel
'MainWindow --> EditableSVGContainer
MainWindow --> DecomposeEditorViewModel

EditableSVGObject --> SVGObject
EditableSVGLayer --> SVGLayer
EditableSVGContainer --> SVGContainer

SVGContainer --> SVGDocumentTemplete
'SVGContainer --> SVGLayerTemplete
SVGLayer --> SVGLayerTemplete

'SVGContainer *- SVGObject
'EditableSVGContainer *- EditableSVGObject

SVGContainer *- SVGLayer
EditableSVGContainer *- EditableSVGLayer

SVGLayer *- SVGObject
EditableSVGLayer *- EditableSVGObject

'EditableSVGContainer -up-|> ObservableObject
'EditableSVGObject -up-|> ObservableObject

DecomposeEditorViewModel --> EditableSVGContainer
' DecomposeEditorViewModel -left-> OutputWriterFactory
' DecomposeEditorViewModel -left-> OutputPurpose


@enduml

@startuml OutputWriters

enum OutputPurpose
{
    Generic
    Animation
    PositionTracking
}

interface IOutputWriter
{
    Execute() : void
}

class OutputWriterFactory
{
    - container : EditableSVGContainer
    ~ OutputWriterFactory(container : EditableSVGContainer)
    ~ Create(outputBaseDirname : string, purpose : OutputPurpose) : IOutputWriter
    ~ GetDefaultOutputBaseDirname() : string
}

class GenericOutputWriter
{
    - container : EditableSVGContainer
    - outputBaseDirname : string
    ~ GenericOutputWriter(container : EditableSVGContainer, outputBaseDirname : string)
    + Execute() : void
}

class AnimationOutputWriter
{

}

class TrackingOutputWriter
{

}

' Helper class
' class BindingHelper <<static>>
' {
'     {static} + AsVisibleIfSame(purpose : OutputPurpose, targetPurpose : OutputPurpose) : Visibility
' }

GenericOutputWriter .up.|> IOutputWriter
AnimationOutputWriter .up.|> IOutputWriter
TrackingOutputWriter .up.|> IOutputWriter

OutputWriterFactory .down.> IOutputWriter : <create>

@enduml