@startuml SVGObjectsDecomposer

class MainWindow
{
    + AppState : AppStateViewModel
    + DecomposeEditor : DecomposeEditorViewModel
    + MainWindow()
    - EvokeSVGDecomposerTask(file : StorageFile) : void
    - OpenSVGFile(file : StorageFile) : SvgDocument
}


class AppStateViewModel
{
    + IsInitialized : bool <<observable property>>
    + IsSVGLoaded : bool <<observable property>>
    + IsEditable : bool <<observable property>>
    + CanUseInkscape : bool <<observable property>>
    + AppStateViewModel()
    + SVGLoaded() : void
    + Initialized() : void
    + Editable() : void
    + InkscapeAvailable() : void
}

class DecomposeEditorViewModel
{
    + CurrentDocument : SvgDocument <<observable property>>
    + EditingSVGContainer : EditableSVGContainer <<observable property>>
    + SelectedSVGObject : EditableSVGObject <<observable property>>
    + LayeredObjects : object <<observable property>>
    + OutputPurposeType : OutputPurpose <<observable property>>
    + OutputBaseDirname : string <<observable property>>
    + SetOutputPurposeCommand : ICommand
    - outputWriterFactory : OutputWriterFactory
    + DecomposeEditorViewModel()
    + SetNewDocument(document : SvgDocument) : void
    - SetOutputPurpose(purpose : OutputPurpose) : void
    + ReleaseDocument() : void
    + Save() : void
}



'  Helper class
class BindingHelper << (H, pink) static >>
{
    {static} + AsVisibleIfSame(purpose : OutputPurpose, targetPurpose : OutputPurpose) : Visibility
    {static} + AsVisibleIf(flag : bool) : Visibility
    {static} + AsVisibleIfNot(flag : bool) : Visibility
}

' packages
package Models
{
    class EditableSVGContainer
}

package OutputWriters
{
    class OutputWriterFactory
}

' arrows
MainWindow -right-> AppStateViewModel
MainWindow --> DecomposeEditorViewModel
MainWindow .up.> BindingHelper : <use>

DecomposeEditorViewModel --> EditableSVGContainer
DecomposeEditorViewModel -> OutputWriterFactory


@enduml

@startuml Models.SVGContainer

class SVGContainer
{
    - baseUri : Uri <<read only>>
    + Filename : string <<read only>>
    + ViewBox : SvgViewBox <<read only>>
    + Layers : List<SVGLayer> <<read only>>
    ~ SVGContainer(document : SvgDocument)
    ~ GetBaseUri() : Uri
}

class SVGLayer
{
    + LayerName : string <<read only>>
    + ID : string <<read only>>
    + Objects : List<SVGObject> <<read only>>
    ~ SVGLayer(layer : SvgGroup, templeteDocument : SVGDocumentTemplete)
}

class SVGObject
{
    + SvgDoc : SvgDocument <<get only>>
    + ID : string <<read only>>
    + ElementName : string <<get only>>
    + Bounds : RectangleF <<get only>>
    + SVGObject(element : SvgElement, layerTemplete : SVGLayerTemplete, docTemplete : SVGDocumentTemplete)
}

' factories for SVG document creation
class SVGDocumentTemplete
{
    - templete : SvgDocument
    - SVGDocumentTemplete(document : SvgDocument)
    {static} ~ Extract(document : SvgDocument, layers : out List<SvgGroup>) : SVGDocumentTemplete
    - ExtractLayers(layers : out List<SvgGroup>) : void
    ~ CreateNewDocument() : SvgDocument
}

class SVGLayerTemplete
{
    - templete : SvgGroup
    - SVGLayerTemplete(group : SvgGroup)
    {static} ~ Extract(group : SvgGroup, elements : out List<SvgElement>) : SVGLayerTemplete
    - ExtractElements(elements : out List<SvgElement>) : void
    ~ CreateNewLayer() : SvgGroup
}

' Helper class
class InkscapeSVGHelper << (H, pink) static >>
{
    {static} - nsInkscape : XNamespace
    {static} ~ TryGetInkscapeLabel(element : SvgElement, name : out string) : bool
}

' arrows
SVGContainer *-down- SVGLayer
SVGLayer *-down- SVGObject

SVGContainer -right-> SVGDocumentTemplete
SVGLayer -right-> SVGLayerTemplete

SVGLayer ..> InkscapeSVGHelper : <use>
SVGObject .left.> InkscapeSVGHelper : <use>

@enduml

@startuml Models.EditableSVGContainer
class EditableSVGContainer
{
    - svgContainer : SVGContainer <<read only>>
    + OriginalFilePath : string <<observable property>>
    + Filename : string <<observable property>>
    + ViewBox : SvgViewBox <<observable property>>
    ~ Layers : ObservableCollection<EditableSVGLayer> <<read only>>
    ~ EditableSVGContainer(svgContainer : SVGContainer)
    + Dispose() : void
    ' + Resize(width : double, height : double) : void
    ' '+ TrimAll() : void
    ' + SaveAll() : void
    ' + GenerateXAMLSample() : void
}

class EditableSVGLayer
{
    - svgLayer : SVGLayer <<read only>>
    + LayerName : string <<observable property>>
    ~ Objects : ObservableCollection<EditableSVGObject> <<read only>>
    ~ EditableLayer(svgLayer : SVGLayer)
    + Dispose() : void
}

class EditableSVGObject
{
    - svgObject : SVGObject
    '- trimmed : SVGObject
    + SvgDoc : SvgDocument <<get only>>
    + ElementName : string <<observable property>>
    + Bounds : RectangleF <<observable property>>
    ~ EditableSVGObject(svgObject : SVGObject)
    '+ IsTrimmed : bool
    '+ Trim() : void
    + Dispose() : void
}

' arrows
EditableSVGContainer -right-> SVGContainer
EditableSVGLayer -right-> SVGLayer
EditableSVGObject -right-> SVGObject

EditableSVGContainer *-- EditableSVGLayer
EditableSVGLayer *-- EditableSVGObject

@enduml

@startuml OutputWriters

class InkscapeProcessHelper << (H, pink) static >>
{
    {static} - inkscape : string
    {static} ~ CheckInkscapeProcess() : bool
    {static} ~ Trim(original : SvgDocument) : SvgDocument
}

enum OutputPurpose
{
    Generic
    Animation
    PositionTracking
}

' interface IOutputWriter
' {
'     Execute() : void
' }

abstract OutputWriter
{
    # container : EditableSVGContainer <<read only>>
    # outputBaseDirname : string <<read only>>
    ~ OutputWriter(container : EditableSVGContainer, outputBaseDirname : string)
    {abstract} + Execute() : void
    # Prepare() : void
    - CheckContainer() : void

}

class OutputWriterFactory
{
    - container : EditableSVGContainer
    ~ OutputWriterFactory(container : EditableSVGContainer)
    ~ Create(outputBaseDirname : string, purpose : OutputPurpose) : IOutputWriter
    ~ GetDefaultOutputBaseDirname() : string
}

class GenericOutputWriter
{
    ' ~ GenericOutputWriter(container : EditableSVGContainer, outputBaseDirname : string)
    ' + Execute() : void
}

class CustomOutputWriterForAnimation
{
    ' ~ CustomOutputWriterForAnimation(container : EditableSVGContainer, outputBaseDirname : string)
    ' + Execute() : void
}

class CustomOutputWriterForTracking
{
    ' ~ CustomOutputWriterForTracking(container : EditableSVGContainer, outputBaseDirname : string)
    ' + Execute() : void
}



'AbstractOutputWriter .up.|> IOutputWriter

GenericOutputWriter .up.|> OutputWriter
CustomOutputWriterForAnimation .up.|> OutputWriter
CustomOutputWriterForTracking .up.|> OutputWriter

OutputWriterFactory .down.> OutputWriter : <create>

CustomOutputWriterForAnimation ..> InkscapeProcessHelper : <use>
CustomOutputWriterForTracking ..> InkscapeProcessHelper : <use>

OutputWriterFactory .right.> OutputPurpose : <use>

@enduml